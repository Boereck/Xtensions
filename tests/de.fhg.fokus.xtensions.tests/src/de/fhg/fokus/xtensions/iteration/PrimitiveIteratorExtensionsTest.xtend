package de.fhg.fokus.xtensions.iteration

import org.junit.Test
import static org.junit.Assert.*
import java.util.PrimitiveIterator.OfInt
import static extension de.fhg.fokus.xtensions.iteration.PrimitiveIteratorExtensions.*

class PrimitiveIteratorExtensionsTest {
	
	/////////////////////////////////////
	// stream(PrimitiveIterator.OfInt) //
	/////////////////////////////////////
	
	@Test def void testStreamIteratorOfInt() {
		val expected = #[0,900, Integer.MAX_VALUE, -600]
		val wrapped = expected.iterator
		val OfInt iterator = new OfInt() {
			override nextInt() {
				wrapped.next
			}
			override hasNext() {
				wrapped.hasNext
			}
		}
		val result = iterator.stream.toArray
		assertArrayEquals(expected, result)
	}
	
	/////////////////////////////////////////////
	// parallelStream(PrimitiveIterator.OfInt) //
	/////////////////////////////////////////////
	
	///////////////////////////////////////////
	// toSpliterator(PrimitiveIterator.OfInt //
	///////////////////////////////////////////
	
	//////////////////////////////////////
	// stream(PrimitiveIterator.OfLong) //
	//////////////////////////////////////
	
	//////////////////////////////////////////////
	// parallelStream(PrimitiveIterator.OfLong) //
	//////////////////////////////////////////////
	
	////////////////////////////////////////////
	// toSpliterator(PrimitiveIterator.OfLong //
	////////////////////////////////////////////
	
	////////////////////////////////////////
	// stream(PrimitiveIterator.OfDouble) //
	////////////////////////////////////////
	
	////////////////////////////////////////////////
	// parallelStream(PrimitiveIterator.OfDouble) //
	////////////////////////////////////////////////
	
	//////////////////////////////////////////////
	// toSpliterator(PrimitiveIterator.OfDouble //
	//////////////////////////////////////////////
}